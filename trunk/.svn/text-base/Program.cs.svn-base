using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using StructureMap;
using StructureMap.Configuration.DSL;
using QuickBooks.Util;
using QuickBooks.DataAccess;

namespace QuickBooks.UI
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.ThreadException += new System.Threading.ThreadExceptionEventHandler(Application_ThreadException);
            InitializeStructureMap();

            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(ObjectFactory.GetInstance<frmMain>());
        }



        static void InitializeStructureMap()
        {
            Settings settings;
            string path = "";

            try
            {
                settings = new Settings();
                settings.Load(Environment.CurrentDirectory + "\\AppData\\app.cfg");
                //settings.Verify();
            }
            catch (Exception ex)
            {

                MessageBox.Show("Ann error occurred while reading settings from disk at " + path
                            + Environment.NewLine + Environment.NewLine +
                            "QuickBooks interface will close.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            ObjectFactory.Initialize(x =>
            {
                x.For<ISettings>()
                    .Singleton()
                    .Use(settings);

                x.For<ILogger>()
                    .Singleton()
                    .Use<Logger>();

                x.For<IQBRepository>().Use<QBRepository>();

                x.For<IFileSystemRepository>().Use<FileSystemRepository>();

                x.For<IEncryption>().Use<Encryption>();

            }
                           );
        }

        static void Application_ThreadException(object sender, System.Threading.ThreadExceptionEventArgs e)
        {
            if (e.Exception is QuickBooksException)
            {
                QuickBooksException qbe = (QuickBooksException)e.Exception;
                MessageBox.Show(qbe.DisplayMessage, qbe.Caption, qbe.Buttons, qbe.Icon);
            }
            else
            {
                var logger = ObjectFactory.GetInstance<ILogger>();
                logger.LogException("The following exception was caught in the global handler.", e.Exception);
            }
        }


    }
}
